<Page loaded="onLoaded">
    <FlexboxLayout class="box">
        <StackLayout  class="form">
            <Image src="~/images/ball.jpg" class="logo" />
            <Label text="Beach Ball My Login App" class="header"/>
            <StackLayout class="input-field">
            <TextField text="{{username}}" id="name" hint="Enter username" class="input"  />
            <StackLayout class="hr-light"/>
        </StackLayout>
        <StackLayout class="input-field">
            <TextField text="{{password}}" id="name" secure="true" hint="Enter password" class="input"  />
            <StackLayout class="hr-light"/>
            </StackLayout>
            <!-- <Button text="Login" tap="onSubmit" class="-primary  -rounded-sm p-t-5" /> -->
            <Button text="Login" tap="onSubmit" class="btn-primary" />
        </StackLayout>
    </FlexboxLayout>
</Page>
<!--
    Login form hazirlayacagiz yani yukardan asagi dogru dikine olacak bir layout yapacagiz o zaman burda StackLayout u tercih ediyoruz
    StackLayout lar normal html deki bizim div lerimiz gibi veya section larimiz gibidir.. daha kolay kontrol edebilmek icin, biz tum form elementlerimiz StackLayout icerisine alarak daha kolay yerlestirebiliyoruz ve de flexboxLayout sayesinde de geene olarak tum form u istedigimz gibi yerlestirebildik...
    Bu arada sunu da unutmayalim, ki, hazir css kutuphanesi import edildigi icn ondan gelen default css ozelliklerde geliyor...bunu bilelim..

     <StackLayout class="hr-light"/> bu sekilde hr cigizisi StackLayout ile koyabiliyoruz

    texField da text mi value mi kullanmaliyiz.????
     To summarize, if you are working on a standard NativeScript project (not Angular), it's better to use text for binding data to a TextField and retrieving the user's input from the text property, as shown in the first example. If you are working on an Angular-based NativeScript project, you may have additional options related to two-way data binding with value.
-->
